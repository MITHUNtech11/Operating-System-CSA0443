#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>

// Define message structure
struct message {
    long msg_type; // Message type (must be > 0)
    char msg_text[100]; // Message text
};

int main() {
    key_t key;
    int msgid;

    // Generate a unique key
    key = ftok("msgqueuefile", 65);

    // Create a message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("Message queue creation failed");
        exit(1);
    }

    int pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process: Sender
        struct message msg;
        msg.msg_type = 1; // Message type must be > 0
        strcpy(msg.msg_text, "Hello from child process!");

        printf("Child: Sending message to message queue...\n");
        if (msgsnd(msgid, &msg, sizeof(msg.msg_text), 0) == -1) {
            perror("Message send failed");
            exit(1);
        }
        printf("Child: Message sent: %s\n", msg.msg_text);
    } else {
        // Parent process: Receiver
        struct message msg;

        // Wait for the child to send the message
        wait(NULL);

        printf("Parent: Receiving message from message queue...\n");
        if (msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0) == -1) {
            perror("Message receive failed");
            exit(1);
        }
        printf("Parent: Message received: %s\n", msg.msg_text);

        // Destroy the message queue
        if (msgctl(msgid, IPC_RMID, NULL) == -1) {
            perror("Message queue deletion failed");
            exit(1);
        }
    }

    return 0;
}
