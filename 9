#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>

#define SHM_SIZE 1024  // Size of shared memory

int main() {
    int pid;
    key_t key = ftok("shmfile", 65); // Generate unique key
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT); // Create shared memory segment

    if (shmid == -1) {
        perror("Shared memory creation failed");
        exit(1);
    }

    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process: Write to shared memory
        char *sharedMemory = (char *)shmat(shmid, NULL, 0);
        if (sharedMemory == (char *)-1) {
            perror("Shared memory attach failed");
            exit(1);
        }

        printf("Child process writing to shared memory...\n");
        strcpy(sharedMemory, "Hello from child process!");

        printf("Child wrote: %s\n", sharedMemory);
        shmdt(sharedMemory); // Detach from shared memory
    } else {
        // Parent process: Read from shared memory
        wait(NULL); // Wait for child process to complete

        char *sharedMemory = (char *)shmat(shmid, NULL, 0);
        if (sharedMemory == (char *)-1) {
            perror("Shared memory attach failed");
            exit(1);
        }

        printf("Parent process reading from shared memory...\n");
        printf("Parent read: %s\n", sharedMemory);

        shmdt(sharedMemory); // Detach from shared memory
        shmctl(shmid, IPC_RMID, NULL); // Destroy the shared memory
    }

    return 0;
}
