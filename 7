#include <stdio.h>

struct Process {
    int pid;          // Process ID
    int burstTime;    // Burst Time
    int arrivalTime;  // Arrival Time
    int waitingTime;  // Waiting Time
    int turnaroundTime; // Turnaround Time
    int isCompleted;  // Process Completion Status
};

// Function to find the next process with the shortest burst time
int findShortestJob(struct Process processes[], int n, int currentTime) {
    int shortestIndex = -1;
    int shortestBurstTime = 1e9; // Initialize with a large value

    for (int i = 0; i < n; i++) {
        if (!processes[i].isCompleted && processes[i].arrivalTime <= currentTime) {
            if (processes[i].burstTime < shortestBurstTime) {
                shortestBurstTime = processes[i].burstTime;
                shortestIndex = i;
            } else if (processes[i].burstTime == shortestBurstTime) {
                // Break ties by arrival time
                if (processes[i].arrivalTime < processes[shortestIndex].arrivalTime) {
                    shortestIndex = i;
                }
            }
        }
    }

    return shortestIndex;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time and arrival time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].burstTime, &processes[i].arrivalTime);
        processes[i].isCompleted = 0; // Mark process as not completed
    }

    int completedProcesses = 0, currentTime = 0;
    float totalWaitingTime = 0, totalTurnaroundTime = 0;

    while (completedProcesses < n) {
        int currentProcess = findShortestJob(processes, n, currentTime);

        if (currentProcess == -1) {
            // If no process is ready, increment the current time
            currentTime++;
            continue;
        }

        // Execute the selected process
        currentTime += processes[currentProcess].burstTime;
        processes[currentProcess].isCompleted = 1;
        completedProcesses++;

        processes[currentProcess].turnaroundTime = currentTime - processes[currentProcess].arrivalTime;
        processes[currentProcess].waitingTime = processes[currentProcess].turnaroundTime - processes[currentProcess].burstTime;

        totalWaitingTime += processes[currentProcess].waitingTime;
        totalTurnaroundTime += processes[currentProcess].turnaroundTime;
    }

    // Output the results
    printf("\nProcess\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burstTime,
               processes[i].arrivalTime, processes[i].waitingTime, processes[i].turnaroundTime);
    }

    printf("\nAverage Waiting Time: %.2f", totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", totalTurnaroundTime / n);

    return 0;
}
